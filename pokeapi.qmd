---
title: "PokeAPI"
author: "Trey Chase"
format: pdf
editor: visual
---

# Introduction

# Scraping from PokeAPI

```{r fetch data}
library(httr2)
library(dplyr)
library(purrr)

# Function to fetch attributes for multiple Pokémon
fetch_pokemon_attributes <- function(api_urls) {
  # Helper function for fetching a single Pokémon
  fetch_single_pokemon <- function(api_url) {
    # Ensure the URL is a single string
    if (length(api_url) != 1) {
      stop("Each API call must have a single URL.")
    }
    
    # Perform API request
    pokemon_response <- request(api_url) |> req_perform()
    pokemon_data <- pokemon_response |> resp_body_json()
    
    # Extract stats
    stats <- setNames(
      map_dbl(pokemon_data$stats, ~ .x$base_stat),
      map_chr(pokemon_data$stats, ~ .x$stat$name)
    )
    
    # Return the Pokémon's details as a tibble
    tibble(
      name = pokemon_data$name,
      id = pokemon_data$id,
      base_experience = pokemon_data$base_experience,
      height = pokemon_data$height,
      weight = pokemon_data$weight,
      hp = stats["hp"],
      attack = stats["attack"],
      defense = stats["defense"],
      special_attack = stats["special-attack"],
      special_defense = stats["special-defense"],
      speed = stats["speed"]
    )
  }
  
  # Process all Pokémon URLs individually
  all_pokemon <- map_dfr(api_urls, fetch_single_pokemon)
  return(all_pokemon)
}

# Example usage with multiple Pokémon URLs
pokemon_urls <- c(
  "https://pokeapi.co/api/v2/pokemon/1",
  "https://pokeapi.co/api/v2/pokemon/2",
  "https://pokeapi.co/api/v2/pokemon/3"
)

multiple_pokemon <- fetch_pokemon_attributes(pokemon_urls)
print(multiple_pokemon)
```


```{r}
library(httr2)
library(dplyr)
library(purrr)
library(stringr)
library(furrr) # For parallel processing

# Function to fetch attributes for multiple Pokémon dynamically
fetch_pokemon_attributes <- function(num_pokemon) {
  # Generate the URLs for the specified number of Pokémon
  base_url <- "https://pokeapi.co/api/v2/pokemon/"
  pokemon_urls <- paste0(base_url, seq_len(num_pokemon))
  
  # Helper function for fetching a single Pokémon
  fetch_single_pokemon <- function(api_url) {
    # Perform API request
    pokemon_response <- request(api_url) |> req_perform()
    pokemon_data <- pokemon_response |> resp_body_json()
    
    # Extract stats
    stats <- setNames(
      map_dbl(pokemon_data$stats, ~ .x$base_stat),
      map_chr(pokemon_data$stats, ~ .x$stat$name)
    )
    
    # Extract sprites
    sprites <- pokemon_data$sprites
    
    # Return the Pokémon's details as a tibble
    tibble(
      name = str_to_title(pokemon_data$name),
      id = pokemon_data$id,
      base_experience = as.numeric(pokemon_data$base_experience),
      height = as.numeric(pokemon_data$height),
      weight = as.numeric(pokemon_data$weight),
      hp = stats["hp"],
      attack = as.numeric(stats["attack"]),
      defense = as.numeric(stats["defense"]),
      special_attack = as.numeric(stats["special-attack"]),
      special_defense = as.numeric(stats["special-defense"]),
      speed = as.numeric(stats["speed"]),
      art = sprites$other$`official-artwork`$front_default,
      sprite = sprites$front_default,
      shiny_sprite = sprites$front_shiny
    )
  }
  
  # Set up parallel backend
  plan(multisession) # Use multiple sessions for parallel processing
  
  # Process all Pokémon URLs in parallel
  all_pokemon <- future_map_dfr(pokemon_urls, fetch_single_pokemon)
  
  return(all_pokemon)
}
```


## Example Call


```{r}
pokemon_df = fetch_pokemon_attributes(20)

pokemon_df
```

```{r}
str(pokemon_df)
```

## Base Stats

```{r plot base stats}
library(ggplot2)
library(tidyr)
library(dplyr)

plot_base_stats <- function(pokemon, pokemon_data) {
  # Filtering the dataset for the specified Pokémon and selecting base stats
  pokemon_stats <- pokemon_data |>
    filter(name == pokemon) |>
    select(
      attack, 
      defense,
      special_attack,
      special_defense,
      speed
    )
  
  # Preparing base stats for plotting
  stats_longer <- pokemon_stats |>
    pivot_longer(
      cols = everything(),
      names_to = "stat",
      values_to = "value"
    ) |>
    mutate(
      fill_color = case_when(
        value <= 50 ~ "red",
        value > 50 & value <= 75 ~ "darkorange",
        value > 75 & value < 100 ~ "greenyellow",
        value >= 100 & value <= 150 ~ "green",
        value > 150 ~ "cyan"
      )
    )
  
  # Creating the plot
  plt <- ggplot(stats_longer, aes(
    x = value, 
    y = factor(stat, levels = rev(c("attack", "defense", "special_attack", "special_defense", "speed"))), 
    fill = fill_color # Map the fill color here
  )) + 
    geom_bar(stat = "identity") +
    geom_text(aes(label = value), hjust = -0.1, fontface = "bold") +
    scale_fill_identity() + # Use identity scale to apply custom colors
    labs(
      title = paste("Base Stats for", pokemon),
      x = "Base Stat Value"
    ) + 
    theme_minimal() +
    theme(plot.title = element_text(face = "bold"))
  
  return(plt)
}

# Example Pokémon data
pokemon_df <- tibble(
  name = c("Bulbasaur", "Charmander"),
  attack = c(49, 52),
  defense = c(49, 43),
  special_attack = c(65, 60),
  special_defense = c(65, 50),
  speed = c(45, 65)
)

# Plot base stats for Bulbasaur
plot_base_stats("Bulbasaur", pokemon_df)


```




