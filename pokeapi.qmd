---
title: "PokeAPI"
author: "Trey Chase"
format: pdf
editor: visual
---

```{r setup, include=FALSE, cache = TRUE}
knitr::opts_chunk$set(echo = TRUE)
```


# Introduction



# Scraping from PokeAPI

##Getting One Pokemon

```{r}
library(httr)

# Define a function to fetch JSON data for a given Pokémon
get_pokemon_data <- function(pokemon_name) {
  # Construct the URL
  base_url <- "https://pokeapi.co/api/v2/pokemon/"
  url <- paste0(base_url, pokemon_name)
  
  # Make the GET request
  response <- GET(url)
  
  # Check if the request was successful
  if (status_code(response) == 200) {
    # Parse the response as JSON
    content <- content(response, as = "text")
    json_data <- jsonlite::fromJSON(content, flatten = TRUE)
    return(json_data)
  } else {
    stop("Failed to fetch data: ", status_code(response))
  }
}

# Example usage
bulbasaur_data <- get_pokemon_data("bulbasaur")
print(bulbasaur_data)

```


```{r}
get_pokemon_moveset <- function(pokemon_name) {
  library(dplyr)
  library(httr)
  library(jsonlite)
  
  # Ensure the Pokémon name is in lowercase
  pokemon_name <- tolower(pokemon_name)
  
  # Construct the URL
  base_url <- "https://pokeapi.co/api/v2/pokemon/"
  url <- paste0(base_url, pokemon_name)
  
  # Make the GET request
  response <- GET(url)
  
  # Check if the request was successful
  if (status_code(response) == 200) {
    # Parse the response as JSON
    content <- content(response, as = "text")
    json_data <- fromJSON(content, flatten = TRUE)
    
    # Extract the moveset
    if ("moves" %in% names(json_data)) {
      moves <- json_data$moves %>%
        pluck("move.url") %>%
        map_df(~ tryCatch({
          move_response <- GET(.x)
          if (status_code(move_response) == 200) {
            move_content <- content(move_response, as = "text")
            move_data <- fromJSON(move_content, flatten = TRUE)
            
            tibble(
              Move = tools::toTitleCase(move_data$name),
              Type = tools::toTitleCase(move_data$type$name),
              BP = ifelse(is.null(move_data$power), NA_integer_, move_data$power), # Handle missing power as NA
              Description = move_data$flavor_text_entries %>%
                filter(language.name == "en") %>%
                slice(1) %>%
                pull(flavor_text) %>%
                stringr::str_replace_all("\n", " ") # Clean up line breaks
            )
          } else {
            tibble(
              Move = "N/A",
              Type = "N/A",
              BP = NA_integer_,
              Description = "N/A"
            )
          }
        }, error = function(e) {
          tibble(
            Move = "Error",
            Type = "Error",
            BP = NA_integer_,
            Description = "Error"
          )
        }))
      
      return(moves %>% arrange(Move)) # Alphabetize the moves
    } else {
      stop("Moveset not found in the response.")
    }
  } else {
    stop(paste("Failed to fetch data: HTTP", status_code(response)))
  }
}


```

## Type Colors

```{r type colors}
type_colors <- c(
  Normal = "#A8A77A", Fire = "#EE8130", Water = "#6390F0",
  Electric = "#F7D02C", Grass = "#7AC74C", Ice = "#96D9D6",
  Fighting = "#C22E28", Poison = "#A33EA1", Ground = "#E2BF65",
  Flying = "#A98FF3", Psychic = "#F95587", Bug = "#A6B91A",
  Rock = "#B6A136", Ghost = "#735797", Dragon = "#6F35FC",
  Dark = "#705746", Steel = "#B7B7CE", Fairy = "#D685AD"
)
```


```{r fetch data}
library(httr2)
library(dplyr)
library(purrr)

# Function to fetch attributes for multiple Pokémon
fetch_pokemon_attributes <- function(api_urls) {
  # Helper function for fetching a single Pokémon
  fetch_single_pokemon <- function(api_url) {
    # Ensure the URL is a single string
    if (length(api_url) != 1) {
      stop("Each API call must have a single URL.")
    }
    
    # Perform API request
    pokemon_response <- request(api_url) |> req_perform()
    pokemon_data <- pokemon_response |> resp_body_json()
    
    # Extract stats
    stats <- setNames(
      map_dbl(pokemon_data$stats, ~ .x$base_stat),
      map_chr(pokemon_data$stats, ~ .x$stat$name)
    )
    
    # Return the Pokémon's details as a tibble
    tibble(
      name = pokemon_data$name,
      id = pokemon_data$id,
      base_experience = pokemon_data$base_experience,
      height = pokemon_data$height,
      weight = pokemon_data$weight,
      hp = stats["hp"],
      attack = stats["attack"],
      defense = stats["defense"],
      special_attack = stats["special-attack"],
      special_defense = stats["special-defense"],
      speed = stats["speed"]
    )
  }
  
  # Process all Pokémon URLs individually
  all_pokemon <- map_dfr(api_urls, fetch_single_pokemon)
  return(all_pokemon)
}

# Example usage with multiple Pokémon URLs
pokemon_urls <- c(
  "https://pokeapi.co/api/v2/pokemon/1",
  "https://pokeapi.co/api/v2/pokemon/2",
  "https://pokeapi.co/api/v2/pokemon/3"
)

multiple_pokemon <- fetch_pokemon_attributes(pokemon_urls)
print(multiple_pokemon)
```


```{r}
library(httr2)
library(dplyr)
library(purrr)
library(stringr)
library(furrr) # For parallel processing
library(future)

# Function to fetch attributes for multiple Pokémon dynamically
fetch_pokemon_attributes <- function(num_pokemon) {
  # Generate the URLs for the specified number of Pokémon
  base_url <- "https://pokeapi.co/api/v2/pokemon/"
  pokemon_urls <- paste0(base_url, seq_len(num_pokemon))
  
  # Helper function for fetching a single Pokémon
  fetch_single_pokemon <- function(api_url) {
    # Perform API request
    pokemon_response <- request(api_url) |> req_perform()
    pokemon_data <- pokemon_response |> resp_body_json()
    
    # Extract stats
    stats <- setNames(
      map_dbl(pokemon_data$stats, ~ .x$base_stat),
      map_chr(pokemon_data$stats, ~ .x$stat$name)
    )
    
    # Extract sprites
    sprites <- pokemon_data$sprites
    
    # Return the Pokémon's details as a tibble
    tibble(
      name = str_to_title(pokemon_data$name),
      id = pokemon_data$id,
      base_experience = as.numeric(pokemon_data$base_experience),
      height = as.numeric(pokemon_data$height),
      weight = as.numeric(pokemon_data$weight),
      hp = stats["hp"],
      attack = as.numeric(stats["attack"]),
      defense = as.numeric(stats["defense"]),
      special_attack = as.numeric(stats["special-attack"]),
      special_defense = as.numeric(stats["special-defense"]),
      speed = as.numeric(stats["speed"]),
      art = sprites$other$`official-artwork`$front_default,
      sprite = sprites$front_default,
      shiny_sprite = sprites$front_shiny
    )
  }
  
  # Set up parallel backend
  plan(multisession) # Use multiple sessions for parallel processing
  
  # Process all Pokémon URLs in parallel
  all_pokemon <- future_map_dfr(pokemon_urls, fetch_single_pokemon)
  
  return(all_pokemon)
}
```


## Example Call


```{r}
pokemon_df = fetch_pokemon_attributes(151)

pokemon_df
```

```{r}
library(DBI)
library(duckdb)
library(dplyr)

# Connect to DuckDB
db_path <- "pokemon_data.duckdb"
con <- dbConnect(duckdb(), db_path)

# Write data to DuckDB
dbWriteTable(con, "pokemon", pokemon_df, overwrite = TRUE)

# Disconnect from DuckDB
dbDisconnect(con)

```

## Base Stats

```{r plot base stats}
library(tidyverse)

plot_base_stats <- function(pokemon, pokemon_data) {
  # Filtering the dataset for the specified Pokémon and selecting base stats
  pokemon_stats <- pokemon_data |>
    filter(name == pokemon) |>
    select(
      attack, 
      defense,
      special_attack,
      special_defense,
      speed
    )
  
  # Preparing base stats for plotting
  stats_longer <- pokemon_stats |>
    pivot_longer(
      cols = everything(),
      names_to = "stat",
      values_to = "value"
    ) |>
    mutate(
      fill_color = case_when(
        value <= 50 ~ "red",
        value > 50 & value <= 75 ~ "darkorange",
        value > 75 & value < 100 ~ "darkgoldenrod1",
        value >= 100 & value < 125 ~ "yellowgreen",
        value >= 125 & value < 180 ~ "green",
        value >= 180 ~ "cyan"
      )
    )
  
  # Creating the plot
  plt <- ggplot(stats_longer, aes(
    x = value, 
    y = factor(stat, levels = rev(unique(stat))), # Avoid using $ notation
    fill = fill_color # Map the fill color here
  )) + 
    geom_bar(stat = "identity", width = 0.1) +
    geom_text(aes(label = value), hjust = -0.1, fontface = "bold") +
    scale_fill_identity() + # Use identity scale to apply custom colors
    labs(
      title = paste("Base Stats for", pokemon),
      x = "Base Stat Value",
      y = NULL
    ) + 
    scale_y_discrete(labels = c(
      "attack" = "Attack",
      "defense" = "Defense",
      "special_attack" = "Sp. Atk.",
      "special_defense" = "Sp. Def.",
      "speed" = "Speed"
    )) +
    scale_x_continuous(
      limits = c(0, 300), # Fixed x-axis scale to a maximum of 300
      expand = c(0, 0) # Remove extra padding
    ) +
    theme_void() +
    theme(plot.title = element_text(face = "bold"))
  
  return(plt)
}


plot_base_stats("Bulbasaur", pokemon_df)
```

## Render Pokemon Images

### Pokemon Default Sprite

```{r render image function}
get_pokemon_sprite <- function(pokemon_name, pokemon_data) {
  tryCatch({
    # Replace with actual API call to fetch the sprite
    # Example using httr:
    response <- httr::GET(paste0("https://pokeapi.co/api/v2/pokemon/", tolower(pokemon_name)))
    httr::stop_for_status(response)
    # Process the response and return the sprite
    # Placeholder: replace with actual logic
    magick::image_blank(width = 200, height = 200, color = "gray")
  }, error = function(e) {
    # Fallback to a placeholder image on error
    magick::image_blank(width = 200, height = 200, color = "red")
  })
}
```


### Pokemon Shiny Sprite

```{r shiny sprite}
get_pokemon_shiny_sprite <- function(pokemon, pokemon_data) {
  # Extract sprite path or URL
  pokemon_sprite <- pokemon_data |>
    dplyr::filter(name == pokemon) |>
    dplyr::select(shiny_sprite) |>
    dplyr::pull()
  
  # Check if sprite is valid
  if (is.null(pokemon_sprite) || pokemon_sprite == "") {
    stop("No sprite found for the specified Pokémon.")
  }
  
  # Try to read the sprite
  img <- tryCatch(
    {
      magick::image_read(pokemon_sprite)
    },
    error = function(e) {
      stop("Failed to read the sprite. Check the file path or URL.")
    }
  )
  
  # Scale the image
  scaled_img <- magick::image_scale(img, "500x500")
  
  return(scaled_img)
}

```


### Pokemon Official Artwork

```{r official artwork}
get_pokemon_art <- function(pokemon, pokemon_data) {
  # Extract sprite path or URL
  pokemon_art <- pokemon_data |>
    dplyr::filter(name == pokemon) |>
    dplyr::select(art) |>
    dplyr::pull()
  
  # Check if sprite is valid
  if (is.null(pokemon_art) || pokemon_art == "") {
    stop("No artwork found for the specified Pokémon.")
  }
  
  # Try to read the sprite
  img <- tryCatch(
    {
      magick::image_read(pokemon_art)
    },
    error = function(e) {
      stop("Failed to read the image. Check the file path or URL.")
    }
  )
  
  # Scale the image
  scaled_img <- magick::image_scale(img, "500x500")
  
  return(scaled_img)
}

```

```{r}
get_pokemon_art("Bulbasaur", pokemon_df)
```

